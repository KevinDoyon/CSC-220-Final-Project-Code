/**
 * Kevin Doyon & Andrew Almond
 * 11/9/18
 */

class List<Type>
{
    // We don't actually have to set a max size with linked lists
    // But it is a good idea.
    // Just picture an infinite loop adding to the list! :O
    public static final int MAX_SIZE = 50;

    private Node<Type> head;
    private Node<Type> tail;
    private Node<Type> curr;
    private int num_items;

    // constructor
    // remember that an empty list has a "size" of -1 and its "position" is at -1
    public List()
    {
        this.head = this.tail=this.curr = null;
        this.num_items= 0;
    }

    // copy constructor
    // clones the list l and sets the last element as the current
    public List(List<Type> l)
    {
        Node<Type> n = l.head.getLink();

        this.head = this.tail = this.curr = null;
        this.num_items = 0;

        while (n != null)
        {
            this.InsertAfter(n.getData());
            n = n.getLink();
        }
    }

    // navigates to the beginning of the list
    public void First()
    {
        curr = head;
    }

    // navigates to the end of the list
    // the end of the list is at the last valid item in the list
    public void Last()
    {
        curr = tail;
    }

    // navigates to the specified element (0-index)
    // this should not be possible for an empty list
    // this should not be possible for invalid positions
    public void SetPos(int pos)
    {
        int posi = -1;
        Node temp = head;
        while((posi<pos) && (temp!=null))
        {
            temp = temp.getLink();
            posi++;
        }
        curr = temp;
    }

    // navigates to the previous element
    // this should not be possible for an empty list
    // there should be no wrap-around
    public void Prev()
    {
        Node temp = head;
        Node temp2 = null;
        while((curr!=null)&&(temp!=curr))
        {
            temp2 = temp;
            temp = temp.getLink();
        }
        curr = temp2;
    }
    
    // navigates to the next element
    // this should not be possible for an empty list
    // there should be no wrap-around
    public void Next()
    {
        if(curr!=null)
        {
            curr = curr.getLink();
        }
    }

    // returns the location of the current element (or -1)
    public int GetPos()
    {
        int count= -1;
        Node temp = head;
        if(num_items<=0)
        {
            return -1;
        }
        while((curr!=null)&&(temp != curr))
        {
            count++;
            temp = temp.getLink();
        }
        return count;
    }

    // returns the value of the current element (or -1)
    public Type GetValue()
    {
        if(num_items==0)
        {
            return null;
        }
        else
        {
            if(curr!=null)
            {
                if(curr == head)
                {
                    Next();
                    return curr.getData();
                }
                if(curr == tail)
                {
                    Prev();
                    return curr.getData();
                }
                return curr.getData();
            }
            else
            {
                return null;
            }
        }
    }

    // returns the size of the list
    // size does not imply capacity
    public int GetSize()
    {
        return num_items;
    }

    // inserts an item before the current element
    // the new element becomes the current
    // this should not be possible for a full list
    public void InsertBefore(Type data)
    {
        if(curr!= null)
        {
            if((data!=null)&&(num_items<50))
            {
                Node dat = new Node();
                dat.setData(data);
                First();
                dat.setLink(curr.getLink());
                curr.setLink(dat);
                num_items++;
                curr = dat;   
            }
        }
        if(num_items<=0)
        {
            if(data!=null)
            {
                head = new Node();
                tail = new Node();
                Node dat = new Node();
                dat.setData(data);
                dat.setLink(tail);
                head.setLink(dat);
                num_items++;
                curr = dat;   
            }
        }   
    }

    // inserts an item after the current element
    // the new element becomes the current
    // this should not be possible for a full list
    public void InsertAfter(Type data)
    {
        if((curr != null)&&(data!=null)&&(num_items<50))
        {
            Node dat = new Node();
            dat.setData(data);
            dat.setLink(curr.getLink());
            curr.setLink(dat);
            num_items++;
            curr = dat;
        }
        if(num_items<=0)
        {
            if(data!=null)
            {
                head = new Node();
                tail = new Node();
                Node dat = new Node();
                dat.setData(data);
                dat.setLink(tail);
                head.setLink(dat);
                num_items++;
                curr = dat;  
            }
        }
    }

    // removes the current element 
    // this should not be possible for an empty list
    public void Remove()
    {
        if(num_items>0)
        {
            if(curr == head)
            {
                //Next();
                head = head.getLink(); curr = head;
                num_items--;
            }
            else{
                if(curr == tail)
                {
                    Prev();
                }
            
                if((curr!=null)) 
                {
                    Prev();
                    curr.setLink(curr.getLink().getLink());
                    num_items--;
                    //(!curr.getLink().equals(null)) curr = curr.getLink();  
                }   
            }
        }
        else
        {

        }
        //Node dat = curr;
    }

    // replaces the value of the current element with the specified value
    // this should not be possible for an empty list
    public void Replace(Type data)
    {
        if(curr == head)
        {
            Next();
        }
        if(curr == tail)
        {
            Prev();
        }
        if(curr!=null)
        {
            if(data!=null)
            {
                Node stuff = new Node();
                stuff.setData(data);
                stuff.setLink(curr.getLink());
                Prev();
                curr.setLink(stuff);
                Next();  
            }   
        }
    }

    // returns if the list is empty
    public boolean IsEmpty()
    {
        if(head == null)
        {
            return true;
        }
        else;
        {
            return false;
        }    
    }

    // returns if the list is full
    public boolean IsFull()
    {
        if(MAX_SIZE == num_items)
        {
            return true;
        }
        else;
        {
            return false;
        }
    }

    // returns if two lists are equal (by value)
    public boolean Equals(List<Type> l)
    {
        if(this.num_items!=l.num_items)
        {
            return false;
        }
        else
        {
            Node temp = this.head;
            Node temp2 = l.head;
            temp = temp.getLink();
            temp2 = temp2.getLink();
            while((temp!=this.tail)&&(temp2!=this.tail))
            {
                if(temp.getData() != temp2.getData())
                {
                    return false;
                }
                temp = temp.getLink();
                temp2 = temp2.getLink();
            } 
           return true;
        }
    }

    // returns the concatenation of two lists
    // l should not be modified
    // l should be concatenated to the end of *this
    // the returned list should not exceed MAX_SIZE elements
    // the last element of the new list is the current
    public List<Type> Add(List<Type> l) //FIX ADD LATER
    {
        List<Type> temp = new List<Type>(this);
        //if()
        this.Last();
        this.Prev();
        l.First();
        l.Next();
        this.curr.setLink(l.curr);
        this.num_items+=l.num_items;
        return this;
    }

    // returns a string representation of the entire list (e.g., 1 2 3 4 5)
    // the string "NULL" should be returned for an empty list
    public String toString()
    {
    	if(num_items<=0)
    	{
    		return "NULL";
    	}
        StringBuilder strbul = new StringBuilder();
        Node test = head;

        while((test!= null))
        {
            if((test!=tail)&&(test!=head))
            {
                strbul.append(test.getData()).append(" ");
            }
            test = test.getLink();

        }
        return strbul.toString();
    }
}
