/**
 * Kevin Doyon & Andrew Almond
 * 11/9/18
 */
 /* Class BT */
 import java.io.*;
 import java.util.*;
 
 class BT<Type>
 {
     private BTNode root;
     private BTNode curr;
     private BTNode prev;
 
     /* Constructor */
     public BT()
     {
         root = null;
     }
     /* Function to check if tree is empty */
     public boolean isEmpty()
     {
         return root == null;
     }
     /* Functions to insert data */
     public void insert(String data, boolean there)
     {
         root = insert(root, data, there);
     }
     /* Function to insert data recursively */
     private BTNode insert(BTNode node, String data, boolean there)
     {
         if (node == null)
             node = new BTNode(data, there);
         else
         {
             if (node.getData().compareTo(data)< 0)
                 node.right = insert(node.right, data, there);
             else if(node.getData().compareTo(data)>0)
                 node.left = insert(node.left, data, there);             
         }
         return node;
     }     
     /* Function to count number of nodes */
     public int countNodes()
     {
         return countNodes(root);
     }
     /* Function to count number of nodes recursively */
     private int countNodes(BTNode r)
     {
         if (r == null)
             return 0;
         else
         {
             int l = 1;
             l += countNodes(r.getLeft());
             l += countNodes(r.getRight());
             return l;
         }
     }
     /* Function to search for an element */
     public boolean search(String val)
     {
         return search(root, val);
     }
     /* Function to search for an element recursively */
     private boolean search(BTNode r, String val)
     {
         if (r.getData().compareTo(val)==0)
             return true;
         if (r.getLeft() != null)
             if (search(r.getLeft(), val))
                 return true;
         if (r.getRight() != null)
             if (search(r.getRight(), val))
                 return true;
         return false;         
     }

     public boolean searchstatus(String val) // needs to return if the book is checked in or not
     {
         return searchstatus(root, val);
     }
     /* Function to search for an element recursively */
     private boolean searchstatus(BTNode r, String val)
     {
         if (r.getData().compareTo(val)==0)
             return r.getThere();
         if (r.getLeft() != null)
             if (searchstatus(r.getLeft(), val))
                 return true;
         if (r.getRight() != null)
             if (searchstatus(r.getRight(), val))
                 return true;
         return false;         
     }

     public boolean changestatus(String val) // needs to return if the book is checked in or not
     {
         return changestatus(root, val);
     }
     /* Function to search for an element recursively */
     private boolean changestatus(BTNode r, String val)
     {
         String something = r.getData();
         if (something.compareTo(val)==0)
         {
             r.setThere();
             return true;
         }
         if (r.getLeft() != null)
             if (changestatus(r.getLeft(), val))
                 return true;
         if (r.getRight() != null)
             if (changestatus(r.getRight(), val))
                 return true;
         return false;         
     }

     /* Function for inorder traversal */
     public void inorder()
     {
         inorder(root);
     }
     private void inorder(BTNode r)
     {
         if (r != null)
         {
             inorder(r.getLeft());
             System.out.println(r.getData());
             inorder(r.getRight());
         }
     }
     /* Function for preorder traversal */
     public void preorder()
     {
         preorder(root);
     }
     private void preorder(BTNode r)
     {
         if (r != null)
         {
             System.out.print(r.getData() +" ");
             preorder(r.getLeft());             
             preorder(r.getRight());
         }
     }
     /* Function for postorder traversal */
     public void postorder()
     {
         postorder(root);
     }
     private void postorder(BTNode r)
     {
         if (r != null)
         {
             postorder(r.getLeft());             
             postorder(r.getRight());
             //System.out.print(r.getData()there+" ");
             System.out.print(r.getData()+" ");
         }
     }
     
 }
 
 
